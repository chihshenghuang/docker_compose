{
  "manifest": {
    "name": "jest-serializer",
    "version": "22.4.3",
    "repository": {
      "type": "git",
      "url": "https://github.com/facebook/jest.git"
    },
    "license": "MIT",
    "main": "build/index.js",
    "_registry": "npm",
    "_loc": "/var/jenkins_home/.cache/yarn/v1/npm-jest-serializer-22.4.3-a679b81a7f111e4766235f4f0c46d230ee0f7436/package.json",
    "readmeFilename": "README.md",
    "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
    "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-22.4.3.tgz#a679b81a7f111e4766235f4f0c46d230ee0f7436",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-22.4.3.tgz",
    "hash": "a679b81a7f111e4766235f4f0c46d230ee0f7436",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "a679b81a7f111e4766235f4f0c46d230ee0f7436"
}